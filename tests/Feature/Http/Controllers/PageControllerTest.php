<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\PageController
 */
class PageControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function add_post_translate_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $page = \App\Models\Page::factory()->create();

        $response = $this->post(route('add_page_translate', ['pageId' => $page->pageId, 'lang' => $page->lang]), [
            // TODO: send request data
        ]);

        $response->assertRedirect('page/'.$page->id);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function add_translate_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $page = \App\Models\Page::factory()->create();

        $response = $this->get('page/add/translate/{pageId}/{lang}');

        $response->assertOk();
        $response->assertViewIs('pages.page_add_translate');
        $response->assertViewHas('tnid');
        $response->assertViewHas('lang');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function create_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get('page/create');

        $response->assertOk();
        $response->assertViewIs('pages.page_create');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $page = \App\Models\Page::factory()->create();

        $response = $this->get('page/edit/{pageId}');

        $response->assertOk();
        $response->assertViewIs('pages.page_edit');
        $response->assertViewHas('page', $page);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function get_pages_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('getpages'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get('admin/pages');

        $response->assertOk();
        $response->assertViewIs('admin.pages.pages_list');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $page = \App\Models\Page::factory()->create();

        $response = $this->post(route('add_page'), [
            // TODO: send request data
        ]);

        $response->assertRedirect('page/'.$page->id);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function translate_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $page = \App\Models\Page::factory()->create();

        $response = $this->get('page/translate/{pageId}/{pageTnid}');

        $response->assertOk();
        $response->assertViewIs('pages.page_translate');
        $response->assertViewHas('page', $page);
        $response->assertViewHas('page_self');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $page = \App\Models\Page::factory()->create();

        $response = $this->post(route('update_page', ['pageId' => $page->pageId]), [
            // TODO: send request data
        ]);

        $response->assertRedirect('page/'.$id);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function view_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $page = \App\Models\Page::factory()->create();
        $pages = \App\Models\Page::factory()->times(3)->create();

        $response = $this->get('admin/pages/view/{pageId}');

        $response->assertOk();
        $response->assertViewIs('pages.pages_view');
        $response->assertViewHas('page', $page);
        $response->assertViewHas('translations');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function view_aborts_with_a_403(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $page = \App\Models\Page::factory()->create();
        $pages = \App\Models\Page::factory()->times(3)->create();

        // TODO: perform additional setup to trigger `abort(403)`...

        $response = $this->get('admin/pages/view/{pageId}');

        $response->assertForbidden();
    }

    // test cases...
}
