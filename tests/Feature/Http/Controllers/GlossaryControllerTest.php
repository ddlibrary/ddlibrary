<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\GlossaryController
 */
class GlossaryControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function approve_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $glossary = \App\Models\Glossary::factory()->create();

        $response = $this->post(route('glossary_approve', ['id' => $glossary->id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function create_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('glossary_create'));

        $response->assertOk();
        $response->assertViewIs('glossary.create');
        $response->assertViewHas('glossary_subjects');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $glossary = \App\Models\Glossary::factory()->create();

        $response = $this->post(route('glossary_delete', ['id' => $glossary->id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $glossaries = \App\Models\Glossary::factory()->times(3)->create();

        $response = $this->get('glossary');

        $response->assertOk();
        $response->assertViewIs('glossary.glossary_list');
        $response->assertViewHas('glossary');
        $response->assertViewHas('glossary_flagged');
        $response->assertViewHas('filters');
        $response->assertViewHas('glossary_subjects');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('glossary_store'), [
            // TODO: send request data
        ]);

        $response->assertRedirect(route('glossary'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $glossary = \App\Models\Glossary::factory()->create();

        $response = $this->post(route('glossary_update'), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    // test cases...
}
