<?php

namespace Tests\Feature\Http\Controllers;

use App\Models\Resource;
use App\Models\ResourceComment;
use App\Models\ResourceAttachment;
use App\Models\ResourceFlag;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\ResourceController
 */
class ResourceControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function index_returns_an_ok_response(): void
    {
        $this->refreshApplicationWithLocale('en');

        $admin = User::factory()->create();
        $admin->roles()->attach(5);
        $this->actingAs($admin);

        $response = $this->get('en/admin/resources');

        $response->assertOk();
        $response->assertViewIs('admin.resources.resources');
        $response->assertViewHas('resources');
        $response->assertViewHas('filters');
        $response->assertViewHas('languages');
    }

    /**
     * @test
     */
    public function attributes_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');
        $this->refreshApplicationWithLocale('en');

        $admin = User::factory()->create();
        $admin->roles()->attach(5);
        $this->actingAs($admin);

        $resource = Resource::factory()->create();

        // Test for authors
        $response = $this->get('en/resources/attributes/authors?term=sample');
        $response->assertOk();
        $response->assertJsonStructure([
            // Check the structure of the JSON response
            '*' => ['id', 'name'], // Assuming the response contains 'id' and 'name' fields
        ]);

        // Test for publishers
        $response = $this->get('en/resources/attributes/publishers?term=sample');
        $response->assertOk();
        $response->assertJsonStructure([
            '*' => ['id', 'name'],
        ]);

        // Test for translators
        $response = $this->get('en/resources/attributes/translators?term=sample');
        $response->assertOk();
        $response->assertJsonStructure([
            '*' => ['id', 'name'],
        ]);

        // Test for keywords
        $response = $this->get('en/resources/attributes/keywords?term=sample');
        $response->assertOk();
        $response->assertJsonStructure([
            '*' => ['id', 'name'],
        ]);
    }

    /**
     * @test
     */
    public function comment_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');
        $this->refreshApplicationWithLocale('en');

        $user = User::factory()->create();
        $this->actingAs($user);

        $resource = Resource::factory()->create();

        $response = $this->post(route('comment'), [
            'userid' => $user->id,
            'resource_id' => $resource->id,
            'comment' => 'This is a test comment.',
        ]);

        $response->assertRedirect('resource/' . $resource->id);
        $this->assertDatabaseHas('resource_comments', [
            'resource_id' => $resource->id,
            'user_id' => $user->id,
            'comment' => 'This is a test comment.',
        ]);
    }

    /**
     * @test
     */
    public function create_step_one_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');
        $this->refreshApplicationWithLocale('en');

        $user = User::factory()->create();
        $this->actingAs($user);

        $response = $this->get(route('step1'));

        $response->assertOk();
        $response->assertViewIs('resources.resources_add_step1');
        $response->assertViewHas('resource');
    }

    /**
     * @test
     */
    public function create_step_one_edit_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');
        $this->refreshApplicationWithLocale('en');

        $admin = User::factory()->create();
        $admin->roles()->attach(5);
        $this->actingAs($admin);

        $resource = Resource::factory()->create();

        $response = $this->get(route('edit1', ['resourceId' => $resource->id]));

        $response->assertOk();
        $response->assertViewIs('resources.resources_edit_step1');
    }

    /**
     * @test
     */
    public function create_step_three_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');
        $this->refreshApplicationWithLocale('en');

        $user = User::factory()->create();
        $this->actingAs($user);

        $response = $this->get(route('step3'));

        $response->assertRedirect('/resources/add/step1');
    }

    /**
     * @test
     */
    public function create_step_three_edit_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');
        $this->refreshApplicationWithLocale('en');

        $admin = User::factory()->create();
        $admin->roles()->attach(5);
        $this->actingAs($admin);

        $resource = Resource::factory()->create();

        $response = $this->get(route('edit3', ['resourceId' => $resource->id]));

        $response->assertOk();
        $response->assertViewIs('resources.resources_edit_step3');
        $response->assertViewHas('resource', $resource);
    }

    /**
     * @test
     */
    public function create_step_two_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('step2'));

        $response->assertRedirect('/resources/add/step1');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function create_step_two_edit_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resource = \App\Models\Resource::factory()->create();

        $response = $this->get(route('edit2', ['resourceId' => $resource->resourceId]));

        $response->assertRedirect('/resources/edit/step1');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function delete_file_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resource = \App\Models\Resource::factory()->create();

        $response = $this->get(route('delete-file', ['resourceId' => $resource->resourceId, 'fileName' => $resource->fileName]));

        $response->assertRedirect('/resources/edit/step2/' . $resourceId);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function delete_resource_returns_an_ok_response(): void
    {
        $this->refreshApplicationWithLocale('en');

        $admin = User::factory()->create();
        $admin->roles()->attach(5);
        $this->actingAs($admin);

        $resource = Resource::factory()->create();

        $response = $this->get('en/admin/resource/delete/' . $resource->id);

        $response->assertRedirect();
        $this->assertEquals(0, Resource::whereId($resource->id)->count());
    }

    /**
     * @test
     */
    public function download_file_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');
        $this->refreshApplicationWithLocale('en');

        $user = User::factory()->create();
        $this->actingAs($user);

        $resource = Resource::factory()->create();

        $response = $this->get(route('download-file', ['resourceId' => $resource->id, 'fileId' => $resource->fileId, 'hash' => $resource->hash]));

        $response->assertRedirect();
    }

    /**
     * @test
     */
    public function download_file_aborts_with_a_404(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');
        $this->refreshApplicationWithLocale('en');

        $resource = Resource::factory()->create();

        $response = $this->get('en/resource/view/999/invalid-key');

        $response->assertNotFound();
    }

    /**
     * @test
     */
    public function download_file_aborts_with_a_403(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');
        $this->refreshApplicationWithLocale('en');

        $resource = Resource::factory()->create();

        $response = $this->get('en/resource/view/' . $resource->id . '/invalid-key');

        $response->assertForbidden();
    }

    /**
     * @test
     */
    public function flag_returns_an_ok_response(): void
    {
        $this->refreshApplicationWithLocale('en');

        $user = User::factory()->create();
        $this->actingAs($user);

        $resource = Resource::factory()->create();

        $response = $this->post(route('flag'), [
            'userid' => $user->id,
            'resource_id' => $resource->id,
            'type' => 'spam',
            'details' => 'This is a spam resource.',
        ]);

        $response->assertRedirect('resource/' . $resource->id);
        $this->assertEquals('This is a spam resource.', ResourceFlag::where('resource_id', $resource->id)->value('details'));
    }

    /**
     * @test
     */
    public function list_returns_an_ok_response(): void
    {
        $this->refreshApplicationWithLocale('en');

        $user = User::factory()->create();
        $this->actingAs($user);

        $response = $this->get(route('resourceList'));

        $response->assertOk();
        $response->assertViewIs('resources.resources_list');
        $response->assertViewHas('resources');
        $response->assertViewHas('views');
        $response->assertViewHas('favorites');
        $response->assertViewHas('comments');
    }

    /**
     * @test
     */
    public function post_step_one_returns_an_ok_response(): void
    {
        $this->refreshApplicationWithLocale('en');

        $user = User::factory()->create();
        $this->actingAs($user);

        $response = $this->post('en/resources/add/step1', [
            'title' => 'Sample Resource',
            'author' => 'Author Name',
            'publisher' => 'Publisher Name',
            'translator' => 'Translator Name',
            'language' => 'en',
            'abstract' => 'This is a sample abstract.',
        ]);

        $response->assertRedirect('/resources/add/step2');
    }

    /**
     * @test
     */
    public function post_step_one_edit_returns_an_ok_response(): void
    {
        $this->refreshApplicationWithLocale('en');

        $admin = User::factory()->create();
        $admin->roles()->attach(5);
        $this->actingAs($admin);

        $resource = Resource::factory()->create();

        $response = $this->post('en/resources/edit/step1/' . $resource->id, [
            'title' => 'Updated Resource',
            'author' => 'Updated Author',
            'publisher' => 'Updated Publisher',
            'translator' => 'Updated Translator',
            'language' => 'en',
            'abstract' => 'Updated abstract.',
        ]);

        $response->assertRedirect('/resources/edit/step2/' . $resource->id);
    }

    /**
     * @test
     */
    public function post_step_three_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resource = \App\Models\Resource::factory()->create();
        $taxonomyTerm = \App\Models\TaxonomyTerm::factory()->create();

        $response = $this->post('en/resources/add/step3', [
            // TODO: send request data
        ]);

        $response->assertRedirect('/home');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function post_step_three_edit_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resource = \App\Models\Resource::factory()->create();
        $taxonomyTerm = \App\Models\TaxonomyTerm::factory()->create();

        $response = $this->post('en/resources/edit/step3/{resourceId}', [
            // TODO: send request data
        ]);

        $response->assertRedirect('/resource/' . $resourceId);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function post_step_two_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post('en/resources/add/step2', [
            // TODO: send request data
        ]);

        $response->assertRedirect('/resources/add/step3');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function post_step_two_edit_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resource = \App\Models\Resource::factory()->create();

        $response = $this->post('en/resources/edit/step2/{resourceId}', [
            // TODO: send request data
        ]);

        $response->assertRedirect('/resources/edit/step3/' . $resourceId);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function published_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');
        $this->refreshApplicationWithLocale('en');

        $admin = User::factory()->create();
        $admin->roles()->attach(5);
        $this->actingAs($admin);

        $resource = Resource::factory()->create();

        $response = $this->get('en/admin/resource/published/' . $resource->id);

        $response->assertOk();
        // Additional assertions can be added here based on the expected output
    }

    /**
     * @test
     */
    public function resource_favorite_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');
        $this->refreshApplicationWithLocale('en');

        $user = User::factory()->create();
        $this->actingAs($user);

        $resource = Resource::factory()->create();

        $response = $this->post('en/resources/favorite', [
            'userid' => $user->id,
            'resource_id' => $resource->id,
        ]);

        $response->assertOk();
        $this->assertDatabaseHas('resource_favorites', [
            'resource_id' => $resource->id,
            'user_id' => $user->id,
        ]);
    }

    /**
     * @test
     */
    public function update_tid_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');
        $this->refreshApplicationWithLocale('en');

        $admin = User::factory()->create();
        $admin->roles()->attach(5);
        $this->actingAs($admin);

        $resource = Resource::factory()->create();
        $translatedResource = Resource::factory()->create();

        $response = $this->post(route('updatetid', ['resourceId' => $resource->id]), [
            'link' => $translatedResource->id,
        ]);

        $response->assertRedirect();
        $this->assertDatabaseHas('resources', [
            'id' => $resource->id,
            'tnid' => $translatedResource->id,
        ]);
    }

    /**
     * @test
     */
    public function view_file_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');
        $this->refreshApplicationWithLocale('en');

        $resourceAttachment = ResourceAttachment::factory()->create();
        $resource = Resource::factory()->create();

        $response = $this->get('en/resource/view/' . $resourceAttachment->id . '/' . $resourceAttachment->key);

        $response->assertOk();
        // Additional assertions can be added here based on the expected output
    }

    /**
     * @test
     */
    public function view_file_aborts_with_a_404(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');
        $this->refreshApplicationWithLocale('en');

        $resource = Resource::factory()->create();

        $response = $this->get('en/resource/view/999/invalid-key');

        $response->assertNotFound();
    }

    /**
     * @test
     */
    public function view_file_aborts_with_a_403(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');
        $this->refreshApplicationWithLocale('en');

        $resource = Resource::factory()->create();

        $response = $this->get('en/resource/view/' . $resource->id . '/invalid-key');

        $response->assertForbidden();
    }

    /**
     * @test
     */
    public function view_public_resource_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');
        $this->refreshApplicationWithLocale('en');

        $resource = Resource::factory()->create();
        $resourceComments = ResourceComment::factory()
            ->times(3)
            ->create(['resource_id' => $resource->id]);

        $response = $this->get('en/resource/' . $resource->id);

        $response->assertOk();
        $response->assertViewIs('resources.resources_view');
        $response->assertViewHas('resource', $resource);
        $response->assertViewHas('relatedItems');
        $response->assertViewHas('comments', $resourceComments);
        $response->assertViewHas('translations');
    }

    /**
     * @test
     */
    public function view_public_resource_aborts_with_a_403(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');
        $this->refreshApplicationWithLocale('en');

        $resource = Resource::factory()->create(['status' => 0]); // Assuming status 0 means unpublished

        $response = $this->get('en/resource/' . $resource->id);

        $response->assertForbidden();
    }
}
