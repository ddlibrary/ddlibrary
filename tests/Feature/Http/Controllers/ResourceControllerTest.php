<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\ResourceController
 */
class ResourceControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function attributes_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resource = \App\Models\Resource::factory()->create();

        $response = $this->get('resources/attributes/{entity}');

        $response->assertRedirect('/home');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function comment_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $setting = \App\Models\Setting::factory()->create();

        $response = $this->post(route('comment'), [
            // TODO: send request data
        ]);

        $response->assertRedirect('login');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function create_step_one_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('step1'));

        $response->assertOk();
        $response->assertViewIs('resources.resources_add_step1');
        $response->assertViewHas('resource');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function create_step_one_edit_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resource = \App\Models\Resource::factory()->create();

        $response = $this->get(route('edit1', ['resourceId' => $resource->resourceId]));

        $response->assertOk();
        $response->assertViewIs('resources.resources_edit_step1');
        $response->assertViewHas('resource', $resource);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function create_step_three_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('step3'));

        $response->assertRedirect('/resources/add/step1');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function create_step_three_edit_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resource = \App\Models\Resource::factory()->create();

        $response = $this->get(route('edit3', ['resourceId' => $resource->resourceId]));

        $response->assertRedirect('/resources/edit/step1');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function create_step_two_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('step2'));

        $response->assertRedirect('/resources/add/step1');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function create_step_two_edit_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resource = \App\Models\Resource::factory()->create();

        $response = $this->get(route('edit2', ['resourceId' => $resource->resourceId]));

        $response->assertRedirect('/resources/edit/step1');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function delete_file_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resource = \App\Models\Resource::factory()->create();

        $response = $this->get(route('delete-file', ['resourceId' => $resource->resourceId, 'fileName' => $resource->fileName]));

        $response->assertRedirect('/resources/edit/step2/'.$resourceId);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function delete_resource_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resource = \App\Models\Resource::factory()->create();

        $response = $this->get('admin/resource/delete/{resourceId}');

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function download_file_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resource = \App\Models\Resource::factory()->create();

        $response = $this->get(route('download-file', ['resourceId' => $resource->resourceId, 'fileId' => $resource->fileId, 'hash' => $resource->hash]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function download_file_aborts_with_a_404(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resource = \App\Models\Resource::factory()->create();

        // TODO: perform additional setup to trigger `abort(404)`...

        $response = $this->get(route('download-file', ['resourceId' => $resource->resourceId, 'fileId' => $resource->fileId, 'hash' => $resource->hash]));

        $response->assertNotFound();
    }

    /**
     * @test
     */
    public function download_file_aborts_with_a_403(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resource = \App\Models\Resource::factory()->create();

        // TODO: perform additional setup to trigger `abort(403)`...

        $response = $this->get(route('download-file', ['resourceId' => $resource->resourceId, 'fileId' => $resource->fileId, 'hash' => $resource->hash]));

        $response->assertForbidden();
    }

    /**
     * @test
     */
    public function flag_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('flag'), [
            // TODO: send request data
        ]);

        $response->assertRedirect('login');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get('admin/resources');

        $response->assertOk();
        $response->assertViewIs('admin.resources.resources');
        $response->assertViewHas('resources');
        $response->assertViewHas('filters');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function list_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->delete(route('resourceList'));

        $response->assertOk();
        $response->assertViewIs('resources.resources_list_content');
        $response->assertViewHas('resources');
        $response->assertViewHas('views');
        $response->assertViewHas('favorites');
        $response->assertViewHas('comments');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function post_step_one_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post('resources/add/step1', [
            // TODO: send request data
        ]);

        $response->assertRedirect('/resources/add/step2');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function post_step_one_edit_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resource = \App\Models\Resource::factory()->create();

        $response = $this->post('resources/edit/step1/{resourceId}', [
            // TODO: send request data
        ]);

        $response->assertRedirect('/resources/edit/step2/'.$resourceId);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function post_step_three_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resource = \App\Models\Resource::factory()->create();
        $taxonomyTerm = \App\Models\TaxonomyTerm::factory()->create();

        $response = $this->post('resources/add/step3', [
            // TODO: send request data
        ]);

        $response->assertRedirect('/home');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function post_step_three_edit_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resource = \App\Models\Resource::factory()->create();
        $taxonomyTerm = \App\Models\TaxonomyTerm::factory()->create();

        $response = $this->post('resources/edit/step3/{resourceId}', [
            // TODO: send request data
        ]);

        $response->assertRedirect('/resource/'.$resourceId);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function post_step_two_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post('resources/add/step2', [
            // TODO: send request data
        ]);

        $response->assertRedirect('/resources/add/step3');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function post_step_two_edit_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resource = \App\Models\Resource::factory()->create();

        $response = $this->post('resources/edit/step2/{resourceId}', [
            // TODO: send request data
        ]);

        $response->assertRedirect('/resources/edit/step3/'.$resourceId);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function published_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resource = \App\Models\Resource::factory()->create();

        $response = $this->get('admin/resource/published/{resourceId}');

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function resource_favorite_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post('resources/favorite', [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_tid_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resource = \App\Models\Resource::factory()->create();

        $response = $this->post(route('updatetid', ['resourceId' => $resource->resourceId]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function view_file_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resourceAttachment = \App\Models\ResourceAttachment::factory()->create();
        $resource = \App\Models\Resource::factory()->create();

        $response = $this->get('resource/view/{fileId}/{key}');

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function view_file_aborts_with_a_404(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resourceAttachment = \App\Models\ResourceAttachment::factory()->create();
        $resource = \App\Models\Resource::factory()->create();

        // TODO: perform additional setup to trigger `abort(404)`...

        $response = $this->get('resource/view/{fileId}/{key}');

        $response->assertNotFound();
    }

    /**
     * @test
     */
    public function view_file_aborts_with_a_403(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resourceAttachment = \App\Models\ResourceAttachment::factory()->create();
        $resource = \App\Models\Resource::factory()->create();

        // TODO: perform additional setup to trigger `abort(403)`...

        $response = $this->get('resource/view/{fileId}/{key}');

        $response->assertForbidden();
    }

    /**
     * @test
     */
    public function view_public_resource_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resource = \App\Models\Resource::factory()->create();
        $resourceComments = \App\Models\ResourceComment::factory()->times(3)->create();

        $response = $this->get('resource/{resourceId}');

        $response->assertOk();
        $response->assertViewIs('resources.resources_view');
        $response->assertViewHas('resource', $resource);
        $response->assertViewHas('relatedItems');
        $response->assertViewHas('comments');
        $response->assertViewHas('translations');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function view_public_resource_aborts_with_a_403(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resource = \App\Models\Resource::factory()->create();
        $resourceComments = \App\Models\ResourceComment::factory()->times(3)->create();

        // TODO: perform additional setup to trigger `abort(403)`...

        $response = $this->get('resource/{resourceId}');

        $response->assertForbidden();
    }

    // test cases...
}
