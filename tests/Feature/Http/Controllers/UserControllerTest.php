<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\UserController
 */
class UserControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function delete_user_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();

        $response = $this->get('admin/user/delete/{userId}');

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $userRoles = \App\Models\UserRole::factory()->times(3)->create();
        $roles = \App\Models\Role::factory()->times(3)->create();

        $response = $this->get(route('edit_user', ['userId' => $user->userId]));

        $response->assertOk();
        $response->assertViewIs('admin.users.edit_user');
        $response->assertViewHas('user', $user);
        $response->assertViewHas('countries');
        $response->assertViewHas('provinces');
        $response->assertViewHas('userRoles', $userRoles);
        $response->assertViewHas('roles', $roles);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function export_users_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $users = \App\Models\User::factory()->times(3)->create();

        $response = $this->get('admin/user/export');

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function favorites_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $resource = \App\Models\Resource::factory()->create();

        $response = $this->get(route('user-favorites'));

        $response->assertOk();
        $response->assertViewIs('users.favorites');
        $response->assertViewHas('user', $user);
        $response->assertViewHas('page');
        $response->assertViewHas('resources');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $roles = \App\Models\Role::factory()->times(3)->create();

        $response = $this->get('admin/users');

        $response->assertOk();
        $response->assertViewIs('admin.users.users');
        $response->assertViewHas('users');
        $response->assertViewHas('roles', $roles);
        $response->assertViewHas('filters');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $userProfile = \App\Models\UserProfile::factory()->create();

        $response = $this->post(route('update_user', ['userId' => $user->userId]), [
            // TODO: send request data
        ]);

        $response->assertRedirect('/admin/user/edit/'.$userId);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_profile_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();

        $response = $this->post(route('user-profile-update'), [
            // TODO: send request data
        ]);

        $response->assertRedirect(URL('user/profile'));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function uploaded_resources_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $resources = \App\Models\Resource::factory()->times(3)->create();

        $response = $this->get(route('user-uploaded-resources'));

        $response->assertOk();
        $response->assertViewIs('users.uploaded-resources');
        $response->assertViewHas('user', $user);
        $response->assertViewHas('page');
        $response->assertViewHas('resources', $resources);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function view_user_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();

        $response = $this->get(route('user-view'));

        $response->assertOk();
        $response->assertViewIs('users.view_user');
        $response->assertViewHas('page');
        $response->assertViewHas('user', $user);

        // TODO: perform additional assertions
    }

    // test cases...
}
