<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\TaxonomyController
 */
class TaxonomyControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function create_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $taxonomyVocabularies = \App\Models\TaxonomyVocabulary::factory()->times(3)->create();

        $response = $this->get(route('taxonomycreate'));

        $response->assertOk();
        $response->assertViewIs('admin.taxonomy.taxonomy_create');
        $response->assertViewHas('vocabulary');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function create_translate_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $taxonomyTerm = \App\Models\TaxonomyTerm::factory()->create();
        $taxonomyHierarchy = \App\Models\TaxonomyHierarchy::factory()->create();
        $taxonomyVocabularies = \App\Models\TaxonomyVocabulary::factory()->times(3)->create();
        $taxonomyTerms = \App\Models\TaxonomyTerm::factory()->times(3)->create();

        $response = $this->get(route('taxonomytranslatecreate', ['tid' => $tid, 'tnid' => $tnid, 'lang' => $lang]));

        $response->assertOk();
        $response->assertViewIs('admin.taxonomy.taxonomy_create_translate');
        $response->assertViewHas('vocabulary');
        $response->assertViewHas('tnid');
        $response->assertViewHas('vid');
        $response->assertViewHas('lang');
        $response->assertViewHas('weight');
        $response->assertViewHas('parents');
        $response->assertViewHas('theParent');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $taxonomyTerm = \App\Models\TaxonomyTerm::factory()->create();
        $taxonomyHierarchy = \App\Models\TaxonomyHierarchy::factory()->create();
        $taxonomyVocabularies = \App\Models\TaxonomyVocabulary::factory()->times(3)->create();
        $taxonomyTerms = \App\Models\TaxonomyTerm::factory()->times(3)->create();

        $response = $this->get(route('taxonomyedit', ['vid' => $vid, 'tid' => $tid]));

        $response->assertOk();
        $response->assertViewIs('admin.taxonomy.taxonomy_edit');
        $response->assertViewHas('term');
        $response->assertViewHas('vocabulary');
        $response->assertViewHas('parents');
        $response->assertViewHas('theParent');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $taxonomyTerms = \App\Models\TaxonomyTerm::factory()->times(3)->create();
        $taxonomyVocabularies = \App\Models\TaxonomyVocabulary::factory()->times(3)->create();

        $response = $this->get(route('gettaxonomylist'));

        $response->assertOk();
        $response->assertViewIs('admin.taxonomy.taxonomy_list');
        $response->assertViewHas('terms');
        $response->assertViewHas('searchBar');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('taxonomystore'), [
            // TODO: send request data
        ]);

        $response->assertRedirect('/admin/taxonomy');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_translate_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->post(route('taxonomytranslatestore', ['tnid' => $tnid]), [
            // TODO: send request data
        ]);

        $response->assertRedirect('/admin/taxonomy');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function translate_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $taxonomyTerm = \App\Models\TaxonomyTerm::factory()->create();
        $taxonomyTerms = \App\Models\TaxonomyTerm::factory()->times(3)->create();

        $response = $this->get('admin/taxonomy/translate/{tid}');

        $response->assertOk();
        $response->assertViewIs('admin.taxonomy.taxonomy_translate');
        $response->assertViewHas('translations');
        $response->assertViewHas('supportedLocals');
        $response->assertViewHas('tnid');
        $response->assertViewHas('tid');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $taxonomyTerm = \App\Models\TaxonomyTerm::factory()->create();

        $response = $this->post(route('taxonomyedit', ['vid' => $vid, 'tid' => $tid]), [
            // TODO: send request data
        ]);

        $response->assertRedirect('/admin/taxonomy');

        // TODO: perform additional assertions
    }

    // test cases...
}
